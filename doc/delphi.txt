*delphi.txt*          Delphi syntax plugin for Vim version 8.1

                    SHORT REFERENCE MANUAL FOR VIM-DELPHI
==============================================================================
CONTENTS                                                     *delphi-contents*

INTRODUCTION.............................................|delphi-introduction|
INSTALL.......................................................|delphi-install|
HIGHLIGHT SETTINGS.................................|delphi-highlight_settings|
FOLDING.......................................................|delphi-folding|
MAPPINGS.....................................................|delphi-mappings|
INDENTATION...............................................|delphi-indentation|
MATCHIT SUPPORT...............................................|delphi-matchit|
TAG HANDLING.............................................|delphi-tag-handling|
SNIPPETS.....................................................|delphi-snippets|
MAKE.............................................................|delphi-make|

==============================================================================
INTRODUCTION                                             *delphi-introduction*

This plugin provides Vim syntax, indent and filetype detection for 
Delphi Pascal Language (aka. delphi) files.

Grab the latest version or report a bug on GitHub:
http://github.com/mattia72/vim-delphi

==============================================================================
INSTALL                                                       *delphi-install*

Copy the included directories into your .vim or vimfiles directory.
Or even better, use |vim-plug| and simply put this line after your 
|Plug| list in your .vimrc: >
  Plug 'mattia72/vim-delphi'
>
The plugin will set filetype automatically to |delphi| only if you open
a *.pas or *.dfm file. You can set it manually by typing: >
  :set filetype=delphi

That's all.

==============================================================================
HIGHLIGHT SETTINGS                                  *delphi-highlight-settings*

Syntax highlight settings:
|delphi_space_errors| : 
    highlight space errors
|delphi_leading_space_error| : 
    highlight leading <space>s, not <tab>s
|delphi_leading_tab_error| : 
    highlight leading <tab>s, not <space>s
|delphi_highlight_function_parameters| :  
    highlight function parameters wich has leading u'_'. eg: Foo(_bar:string) 

------------------------------------------------------------------------------
Examples

If you like <tab> indenting, <space> can be highlighted as error: >
    let  delphi_space_errors = 1
    let  delphi_leading_space_error = 1

Unnecessary spaces on the end of the lines: >
    let  delphi_space_errors = 1
    let  delphi_trailing_space_error = 1

Note: 
These are the default settings. |unlet| these variables if you don't like it.

==============================================================================
HIGHLIGHT SETTINGS                                  *delphi-highlight-settings*

==============================================================================
FOLDING                                                       *delphi-folding*

The delphi syntax file provides syntax folding (see |:syn-fold|) for code blocks.
When 'foldmethod' is set to 'syntax' then begin-end blocks will be folded. >
  set foldmethod=syntax
  set foldlevelstart=99 "so folds are closed initially

Some useful commad for opening and closing folds. 
zR		Open all folds.  This sets 'foldlevel' to highest fold level.
zM		Close all folds: set 'foldlevel' to 0.
zO		Open all folds under the cursor recursively.  
zC		Close all folds under the cursor recursively.  
See also: |fold.txt|

Note: 
Syntax folding might slow down syntax highlighting significantly,
especially for large files.

==============================================================================
MAPPINGS                                                     *delphi-mappings*

The plugin provides some useful mapping definition also. 

Mappings defined in ftplugin/common.vim: (common for *.dfm and *.pas files)
<leader>sd      Switch to *.dfm  
<leader>sp      Switch to *.pas

Mappings defined in plugin/delphi.vim:
vif             Select all in a block  
vaf             Select a whole block  
<leader>t=      Align selected assignes in nice columns with |Tabularize| 
<leader>t:      Align selected declarations in nice columns with |Tabularize| 
<F7>            Save all and make 

==============================================================================
MATCHIT SUPPORT                                               *delphi-matchit*

Matchit plugin is supported by defining |b:match_words| variable. The user can 
switch between 'begin'/'record'/'union' etc. and the corresponding 'end' 
with %. More info about matchit features in |matchit.txt|.

NOTE: Matchit is part of the standard Vim installation, but it must be
activated. For instructions type: >
  :help matchit-install 
>
It's easier to install the modern matchit and matchparen replacement by: >
  Plug 'andymass/vim-matchup'

==============================================================================
INDENTATION                                               *delphi-indentation*

This part is under construction!!!

ggVG=               Indents the whole file
==                  Indents the current line

==============================================================================
TAG HANDLING                                             *delphi-tag-handling*

I'm using Exuberant Ctags http://ctags.sourceforge.net and |gen_tags.vim| 
for tag generation. 
By default Ctags helps to find only functions and procedures: >
  $ ctags --list-kinds=Pascal
  f  functions
  p  procedures

Put this lines in ext.conf generated by |:EditExt| >
  --languages=Pascal
  --exclude=__history
  --exclude=__recovery

The following command generates the ctags db: >
  :GenCtags

==============================================================================
SNIPPETS                                                     *delphi-snippets*

For available snippets see <plugin_dir>/vim-delphi/snippets directory.
See also: |neosnippet.txt|

==============================================================================
MAKE                                                             *delphi-make*

There ar two commands for building delphi projects easily:

:DelphiMake [{project}]       
                              searches {project} in the path and calls 
			      make! /p:config=|g:delphi_build_config| {project}
:DelphiMakeRecent [{project}] 
                              same as above, but full path of the given 
                              {project} will be stored in variable 
                              |g:delphi_recent_project|.
                              Without any argument |g:delphi_recent_project|
                              will be built.
:DelphiBuildConfig [{config}]
                              Sets |g:delphi_build_config| variable.
                              Without argument simply echos the content of 
                              this variable.
                              The default value of |g:delphi_build_config| is
                              "Debug"

------------------------------------------------------------------------------
 vim:tw=79:ts=8:ft=help:norl:
