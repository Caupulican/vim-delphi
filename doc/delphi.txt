*delphi.txt*          Delphi syntax plugin for Vim version 8.1

                    SHORT REFERENCE MANUAL FOR VIM-DELPHI
==============================================================================
CONTENTS                                                     *delphi-contents*

INTRODUCTION.............................................|delphi-introduction|
INSTALL.......................................................|delphi-install|
SETTINGS.....................................................|delphi-settings|
  HIGHLIGHT SETTINGS...............................|delphi-highlight-settings|
COMMANDS.....................................................|delphi-commands|
MAPPINGS.....................................................|delphi-mappings|
FOLDING.......................................................|delphi-folding|
INDENTATION...............................................|delphi-indentation|
MATCHIT SUPPORT...............................................|delphi-matchit|
TAG HANDLING.............................................|delphi-tag-handling|
SNIPPETS.....................................................|delphi-snippets|
MAKE.............................................................|delphi-make|

==============================================================================
INTRODUCTION                                              *delphi-introduction*

This plugin provides Vim compile, syntax, indent and filetype detection for 
Delphi Pascal Language (aka. delphi) files.

Grab the latest version or report a bug on GitHub:
http://github.com/mattia72/vim-delphi

==============================================================================
INSTALL                                                        *delphi-install*

Copy the included directories into your .vim or vimfiles directory.
Or even better, use |vim-plug| and simply put this line after your 
|Plug| list in your .vimrc: >
  Plug 'mattia72/vim-delphi'

If you want to enjoy asynchron behaviour of Vim 8, then you should
install |asyncrun| also >
  Plug 'skywind3000/asyncrun.vim'

So you will have some additional commands. See |delphi-make| for more info.

Snippets are handled by |Shougo/neosnipet| plugin >
  Plug 'Shougo/neosnipet'

|make| works only if *rsvars.bat* is in the path or *$BDS* environment variable is set.

Delphi plugin will be loaded automatically if you open a **.pas* or **.dfm* file. 
You can load it manually by typing: >
  :set filetype=delphi

That's all.

==============================================================================
SETTINGS                                                      *delphi-settings*

The used build configuration can be given by setting |g:delphi_build_config|
variable. Or |:DelphiBuildConfig| command. The default is: >
  let g:delphi_build_config = 'Debug'

Note: It is recommended to set |path| within vim to search files and 
      |make| projects easily.  
------------------------------------------------------------------------------
Adding a directory >
 set path+=$SRC\\DelphiProject1

So an entire directory tree will be searched. (See *starstar* for more info) >
 set path+=$SRC\\DelphiProject2\\**

==============================================================================
HIGHLIGHT SETTINGS                                  *delphi-highlight-settings*

Syntax highlight settings are:

|delphi_space_errors| : 
    highlight space errors
|delphi_leading_space_error| : 
    highlight leading <space>s, but not <tab>s
|delphi_leading_tab_error| : 
    highlight leading <tab>s, but not <space>s
|delphi_trailing_space_error| :
    highlight trailing <space>s

    Eg: if you like <tab> indenting, <space> can be highlighted as error: 
        let  delphi_space_errors = 1
        let  delphi_leading_space_error = 1

    Unnecessary spaces on the end of the lines can be highlighted as follows: 
        let  delphi_space_errors = 1
        let  delphi_trailing_space_error = 1

    Note: 
    These are the default settings. |unlet| these variables if you don't like it.

|delphi_highlight_uppercase_consts| :  
    highlight consts written all with capital letters. eg: UPPERCASE_CONST

|delphi_highlight_function_parameters| :  
    highlight function parameters which has leading '_' or 'A' or equals 'Sender'. 
    eg: Foo(_bar:string) or Bar(Sender: TObject; ACanvas: TCanvas)

|delphi_highlight_field_names| :  
    highlight field names which has leading 'F' and continues with uppercase
    letter. eg: FMyField 

Note:
1. Function and procedure names will be highlighted correctly only if they 
   are followed by parenthesis '()'
2. Const variable names are highlighted if they are written in uppercase
3. Sometimes in very large files ( > 1000 lines) highlighting fails and from
   some point, everything will be highlighted as comment. In this case the
   following commands could help: >
     :e! 
     :syn off | syn on 

==============================================================================
COMMANDS                                                      *delphi-commands*

:DelphiOpenInDevEnv [{file}]  Opens a file in the default external pascal editor. 
                              It is usually the Delphi Develpment Environment.
                              Without argument, the current file is used.
                              By default it is mapped to <F2>

:DelphiSwitchToDfm or
:DelphiSwitchToPas            Switch between dfm and pas files. 
                              Note: Both command works with dfm and pas files too.
                              By default it is mapped to <F12>

Note: Make helper commands are described in |delphi-make| section.

==============================================================================
MAPPINGS                                                      *delphi-mappings*

The plugin provides some useful mapping definition also. 

Common mappings for *.dfm and *.pas files (defined in ftplugin/common.vim):
------------------------------------------------------------------------------
    <leader>sd      Switch to *.dfm  
    <leader>sp      Switch to *.pas
    <F12>           Switch between *dfm and *.pas
    <F2>            Open the file in the default external pascal editor. 

Mappings for *.pas files only (defined in plugin/delphi.vim):
------------------------------------------------------------------------------
    vif             Select all in a block (works only if *foldmethod* is 'syntax')   
    vaf             Select a whole block  (works only if *foldmethod* is 'syntax')
    <F7>            Save all and make 

Edit helpers for *.pas files
------------------------------------------------------------------------------
    <leader>t=      Align selected assignes in nice columns with |Tabularize| 
    <leader>t:      Align selected declarations in nice columns with |Tabularize| 
    <leader>dt      Retab current line or selection
    <leader>d;      Put ';' to the end of line

Jumpings in *.pas files
------------------------------------------------------------------------------
    <leader>dU      Jump to the first 'uses' clause in file
    <leader>du      Jump to the second 'uses' clause in file
    <leader>di      Jump to the 'implementation' section
    <leader>df      Jump to the 'interface' section 
    <leader>dv      Jump to the previous 'var' section 
    <leader>db      Jump to the previous 'begin' 
    <leader>de      Jump to the next 'end' 
    <leader>dP      Search the previous 'procedure' or 'function'
		    the next/prev match can be found with |n| or |N|
    <leader>dp      Search the next 'procedure' or 'function'
		    the next/prev match can be found with |n| or |N|
    <leader>N       Jump to the previous match 
                    and set cursor at the top of window
    <leader>n       Jump to the next match 
                    and set cursor at the top of window

==============================================================================
FOLDING                                                        *delphi-folding*

The delphi syntax file provides syntax folding (see |:syn-fold|) for code blocks.
When 'foldmethod' is set to 'syntax' then begin-end blocks will be folded. >
  set foldmethod=syntax
  set foldlevelstart=99 "so folds are closed initially

Some useful commad for opening and closing folds. 
zR		Open all folds.  This sets 'foldlevel' to highest fold level.
zM		Close all folds: set 'foldlevel' to 0.
zO		Open all folds under the cursor recursively.  
zC		Close all folds under the cursor recursively.  
See also: |fold.txt|

Note: 
Syntax folding might slow down syntax highlighting significantly,
especially for large files.

==============================================================================
MATCHIT SUPPORT                                                *delphi-matchit*

Matchit plugin is supported by defining |b:match_words| variable. The user can 
switch between 'begin'/'record'/'union' etc. and the corresponding 'end' 
with %. More info about matchit features in |matchit.txt|.

NOTE: Matchit is part of the standard Vim installation, but it must be
activated. For instructions type: >
  :help matchit-install 

It's easier to install the modern matchit and matchparen replacement by: >
  Plug 'andymass/vim-matchup'

==============================================================================
INDENTATION                                                *delphi-indentation*

This function is under development !!!

ggVG=               Indents the whole file
==                  Indents the current line

==============================================================================
TAG HANDLING                                              *delphi-tag-handling*

I'm using Exuberant Ctags http://ctags.sourceforge.net and |gen_tags.vim| 
for tag generation. 
By default Ctags helps to find only functions and procedures: >
  $ ctags --list-kinds=Pascal
  f  functions
  p  procedures

Put this lines in ext.conf generated by |:EditExt| >
  --languages=Pascal
  --exclude=__history
  --exclude=__recovery

The following command generates the ctags db: >
  :GenCtags

==============================================================================
SNIPPETS                                                      *delphi-snippets*
                                                   
Snippets are handled by |Shougo/neosnipet| plugin.

1. In |insertmode|, type a snippet trigger (eg. `proc` for a procedure)
2. Press <C-k> to insert the snippet
3. <C-k> jumps to the next field in the snippet

For available snippets in |vim-delphi| see <plugin_dir>/vim-delphi/snippets directory.
See also: |neosnippet.txt|

==============================================================================
MAKE                                                              *delphi-make*

The plugin sets |makeprg| for building delphi projects easily: >
  rsvars && msbuild /nologo /v:m /property:GenerateFullPaths=true

It works only if *rsvars.bat* is in the path or *$BDS* environment variable is set.

The defined commands:

:DelphiMake [{project}]       
                              searches {project} in the path and calls 
                              :make! /p:config=|g:delphi_build_config| {project}
                              without argument, it tries to find a *.dproj
                              file in the current directory and then upwards
                              It works async if |skywind3000/asyncrun.vim|
                              is installed.
:DelphiMakeRecent [{project}] 
                              same as DelphiMake, but full path of the given 
                              {project} will be stored in the variable 
                              |g:delphi_recent_project|.
                              Without any argument |g:delphi_recent_project|
                              will be built. On first run the project name will
                              be asked, then searched in the |path|.
                              It works async if |skywind3000/asyncrun.vim|
                              is installed.
:DelphiBuildConfig [{config}]
                              Sets |g:delphi_build_config| variable.
                              Without argument simply echos the content of 
                              this variable.
                              The default value of |g:delphi_build_config| is
                              "Debug"

------------------------------------------------------------------------------
 vim:tw=79:ts=8:ft=help:norl:
